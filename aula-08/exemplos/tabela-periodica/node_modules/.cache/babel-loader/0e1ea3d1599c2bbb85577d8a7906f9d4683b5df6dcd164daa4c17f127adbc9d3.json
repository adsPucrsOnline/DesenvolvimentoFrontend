{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [options, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n  const getSelectTriggerProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n  const getListboxProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","useList","defaultOptionStringifier","useCompoundParent","selectReducer","combineHooksSlotProps","preventDefault","event","useSelect","props","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","getOptionAsString","value","valueProp","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","map","option","index","label","ref","createRef","id","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","rootRef","mergedButtonRef","optionValues","Array","from","keys","isItemDisabled","useCallback","valueToCheck","_option$disabled","get","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","_buttonRef$current","current","focus","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","createHandleButtonClick","otherHandlers","_otherHandlers$onClic","onClick","call","defaultMuiPrevented","action","buttonClick","_options$get2","optionRef","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","optionValue","getSelectTriggerProps","arguments","length","role","getButtonProps","listboxAndButtonProps","combinedProps","getListboxProps","onMouseDown","useDebugValue","selectValue"],"sources":["/Users/cassioawt/git/GraPucrsOnline/DSF/aula-08/exemplos/tabela-periodica/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [options, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (otherHandlers = {}) => {\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n  const getListboxProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,IAAIC,UAAU,EAAEC,cAAc,IAAIC,KAAK,EAAEC,0BAA0B,IAAIC,iBAAiB,QAAQ,YAAY;AACxI,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,iBAAiB,QAAQ,mBAAmB;AACrD,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,wBAAwB,MAAM,4BAA4B;AACjE,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,qBAAqB,MAAM,gCAAgC;AAClE,SAASC,cAAcA,CAACC,KAAK,EAAE;EAC7BA,KAAK,CAACD,cAAc,CAAC,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,SAASA,CAACC,KAAK,EAAE;EACxB,MAAM;IACJC,SAAS,EAAEC,aAAa;IACxBC,WAAW,GAAG,KAAK;IACnBC,YAAY,EAAEC,gBAAgB;IAC9BC,QAAQ,GAAG,KAAK;IAChBC,SAAS,EAAEC,aAAa;IACxBC,UAAU,EAAEC,cAAc;IAC1BC,QAAQ,GAAG,KAAK;IAChBC,QAAQ;IACRC,iBAAiB;IACjBC,YAAY;IACZC,IAAI,EAAEC,QAAQ;IACdC,OAAO,EAAEC,YAAY;IACrBC,iBAAiB,GAAG1B,wBAAwB;IAC5C2B,KAAK,EAAEC;EACT,CAAC,GAAGrB,KAAK;EACT,MAAMC,SAAS,GAAGlB,KAAK,CAACuC,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMC,eAAe,GAAGtC,UAAU,CAACiB,aAAa,EAAED,SAAS,CAAC;EAC5D,MAAMQ,UAAU,GAAG1B,KAAK,CAACuC,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMf,SAAS,GAAGpB,KAAK,CAACqB,aAAa,CAAC;EACtC,IAAIJ,YAAY;EAChB,IAAIiB,SAAS,KAAKG,SAAS,IAAInB,gBAAgB,KAAKmB,SAAS,EAAE;IAC7DpB,YAAY,GAAG,EAAE;EACnB,CAAC,MAAM,IAAIC,gBAAgB,KAAKmB,SAAS,EAAE;IACzC,IAAIb,QAAQ,EAAE;MACZP,YAAY,GAAGC,gBAAgB;IACjC,CAAC,MAAM;MACLD,YAAY,GAAGC,gBAAgB,IAAI,IAAI,GAAG,EAAE,GAAG,CAACA,gBAAgB,CAAC;IACnE;EACF;EACA,MAAMe,KAAK,GAAGrC,KAAK,CAAC0C,OAAO,CAAC,MAAM;IAChC,IAAIJ,SAAS,KAAKG,SAAS,EAAE;MAC3B,IAAIb,QAAQ,EAAE;QACZ,OAAOU,SAAS;MAClB;MACA,OAAOA,SAAS,IAAI,IAAI,GAAG,EAAE,GAAG,CAACA,SAAS,CAAC;IAC7C;IACA,OAAOG,SAAS;EAClB,CAAC,EAAE,CAACH,SAAS,EAAEV,QAAQ,CAAC,CAAC;EACzB,MAAM;IACJe,QAAQ;IACRC,YAAY,EAAEC;EAChB,CAAC,GAAGlC,iBAAiB,CAAC,CAAC;EACvB,MAAMuB,OAAO,GAAGlC,KAAK,CAAC0C,OAAO,CAAC,MAAM;IAClC,IAAIP,YAAY,IAAI,IAAI,EAAE;MACxB,OAAO,IAAIW,GAAG,CAACX,YAAY,CAACY,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK,CAACD,MAAM,CAACX,KAAK,EAAE;QAChEA,KAAK,EAAEW,MAAM,CAACX,KAAK;QACnBa,KAAK,EAAEF,MAAM,CAACE,KAAK;QACnB3B,QAAQ,EAAEyB,MAAM,CAACzB,QAAQ;QACzB4B,GAAG,EAAE,aAAanD,KAAK,CAACoD,SAAS,CAAC,CAAC;QACnCC,EAAE,EAAG,GAAE7B,SAAU,IAAGyB,KAAM;MAC5B,CAAC,CAAC,CAAC,CAAC;IACN;IACA,OAAON,QAAQ;EACjB,CAAC,EAAE,CAACR,YAAY,EAAEQ,QAAQ,EAAEnB,SAAS,CAAC,CAAC;EACvC,MAAM8B,gBAAgB,GAAGpD,UAAU,CAACyB,cAAc,EAAED,UAAU,CAAC;EAC/D,MAAM;IACJ6B,YAAY,EAAEC,kBAAkB;IAChCC,MAAM,EAAEC,YAAY;IACpBC,YAAY,EAAEC,kBAAkB;IAChCC,OAAO,EAAEC;EACX,CAAC,GAAGvD,SAAS,CAAC;IACZgB,QAAQ;IACRsC,OAAO,EAAErB;EACX,CAAC,CAAC;EACF,MAAMuB,YAAY,GAAG/D,KAAK,CAAC0C,OAAO,CAAC,MAAMsB,KAAK,CAACC,IAAI,CAAC/B,OAAO,CAACgC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAChC,OAAO,CAAC,CAAC;EAC/E,MAAMiC,cAAc,GAAGnE,KAAK,CAACoE,WAAW,CAACC,YAAY,IAAI;IACvD,IAAIC,gBAAgB;IACpB,MAAMtB,MAAM,GAAGd,OAAO,CAACqC,GAAG,CAACF,YAAY,CAAC;IACxC,OAAO,CAACC,gBAAgB,GAAGtB,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACzB,QAAQ,KAAK,IAAI,GAAG+C,gBAAgB,GAAG,KAAK;EAC1G,CAAC,EAAE,CAACpC,OAAO,CAAC,CAAC;EACb,MAAMsC,eAAe,GAAGxE,KAAK,CAACoE,WAAW,CAACC,YAAY,IAAI;IACxD,MAAMrB,MAAM,GAAGd,OAAO,CAACqC,GAAG,CAACF,YAAY,CAAC;IACxC,IAAI,CAACrB,MAAM,EAAE;MACX,OAAO,EAAE;IACX;IACA,OAAOZ,iBAAiB,CAACY,MAAM,CAAC;EAClC,CAAC,EAAE,CAACd,OAAO,EAAEE,iBAAiB,CAAC,CAAC;EAChC,MAAMqC,eAAe,GAAGzE,KAAK,CAAC0C,OAAO,CAAC,OAAO;IAC3CgC,cAAc,EAAErC,KAAK;IACrBL,IAAI,EAAEC;EACR,CAAC,CAAC,EAAE,CAACI,KAAK,EAAEJ,QAAQ,CAAC,CAAC;EACtB,MAAM0C,SAAS,GAAG3E,KAAK,CAACoE,WAAW,CAACQ,SAAS,IAAI;IAC/C,IAAIC,YAAY;IAChB,OAAO,CAACA,YAAY,GAAG3C,OAAO,CAACqC,GAAG,CAACK,SAAS,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGC,YAAY,CAACxB,EAAE;EACnF,CAAC,EAAE,CAACnB,OAAO,CAAC,CAAC;EACb,MAAM4C,qBAAqB,GAAG9E,KAAK,CAACoE,WAAW,CAAC,CAACrD,KAAK,EAAEgE,SAAS,KAAK;IACpE,IAAInD,QAAQ,EAAE;MACZC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACd,KAAK,EAAEgE,SAAS,CAAC;IACxD,CAAC,MAAM;MACL,IAAIC,WAAW;MACfnD,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACd,KAAK,EAAE,CAACiE,WAAW,GAAGD,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,GAAGC,WAAW,GAAG,IAAI,CAAC;IACxG;EACF,CAAC,EAAE,CAACpD,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EACxB,MAAMoD,qBAAqB,GAAGjF,KAAK,CAACoE,WAAW,CAAC,CAACrD,KAAK,EAAEmE,QAAQ,KAAK;IACnEpD,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACf,KAAK,EAAEmE,QAAQ,IAAI,IAAI,GAAGA,QAAQ,GAAG,IAAI,CAAC;EACnG,CAAC,EAAE,CAACpD,iBAAiB,CAAC,CAAC;EACvB,MAAMqD,iBAAiB,GAAGnF,KAAK,CAACoE,WAAW,CAAC,CAACrD,KAAK,EAAEqE,KAAK,EAAEC,UAAU,KAAK;IACxE,IAAID,KAAK,KAAK,MAAM,EAAE;MACpBrD,YAAY,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACsD,UAAU,CAAC;MACxD,IAAIA,UAAU,KAAK,KAAK,IAAI,CAACtE,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACuE,IAAI,MAAM,MAAM,EAAE;QAC5E,IAAIC,kBAAkB;QACtB,CAACA,kBAAkB,GAAGrE,SAAS,CAACsE,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,kBAAkB,CAACE,KAAK,CAAC,CAAC;MACxF;IACF;EACF,CAAC,EAAE,CAAC1D,YAAY,CAAC,CAAC;EAClB,MAAM2D,iBAAiB,GAAG;IACxBC,eAAe,EAAEA,CAAA,KAAM;MACrB,IAAIC,aAAa;MACjB,OAAO;QACLC,gBAAgB,EAAE,IAAI;QACtBnB,cAAc,EAAE,CAACkB,aAAa,GAAGvE,YAAY,KAAK,IAAI,GAAGuE,aAAa,GAAG,EAAE;QAC3E5D,IAAI,EAAEZ;MACR,CAAC;IACH,CAAC;IACDuD,SAAS;IACTmB,eAAe,EAAErB,eAAe;IAChCN,cAAc;IACdN,OAAO,EAAEC,eAAe;IACxBjC,QAAQ,EAAEiD,qBAAqB;IAC/BhD,iBAAiB,EAAEmD,qBAAqB;IACxCc,aAAa,EAAEZ,iBAAiB;IAChCa,oBAAoB,EAAEhG,KAAK,CAAC0C,OAAO,CAAC,OAAO;MACzCd;IACF,CAAC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;IACfqE,KAAK,EAAElC,YAAY;IACnBmC,eAAe,EAAE1B,eAAe;IAChC2B,aAAa,EAAEvE,QAAQ,GAAG,UAAU,GAAG,QAAQ;IAC/CwE,YAAY,EAAExF;EAChB,CAAC;EACD,MAAM;IACJyF,QAAQ;IACR9C,YAAY,EAAE+C,mBAAmB;IACjC1D,YAAY,EAAE2D,gBAAgB;IAC9BC,KAAK,EAAE;MACLxE,IAAI;MACJ6D,gBAAgB,EAAEY,iBAAiB;MACnC/B,cAAc,EAAEgC;IAClB,CAAC;IACD7C,OAAO,EAAE8C;EACX,CAAC,GAAGlG,OAAO,CAACiF,iBAAiB,CAAC;EAC9B,MAAMkB,uBAAuB,GAAGC,aAAa,IAAI9F,KAAK,IAAI;IACxD,IAAI+F,qBAAqB;IACzBD,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACC,qBAAqB,GAAGD,aAAa,CAACE,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,qBAAqB,CAACE,IAAI,CAACH,aAAa,EAAE9F,KAAK,CAAC;IACpJ,IAAI,CAACA,KAAK,CAACkG,mBAAmB,EAAE;MAC9B,MAAMC,MAAM,GAAG;QACb5B,IAAI,EAAE9E,iBAAiB,CAAC2G,WAAW;QACnCpG;MACF,CAAC;MACDsF,QAAQ,CAACa,MAAM,CAAC;IAClB;EACF,CAAC;EACD5G,iBAAiB,CAAC,MAAM;IACtB;IACA,IAAImG,iBAAiB,IAAI,IAAI,EAAE;MAC7B,IAAIW,aAAa;MACjB,MAAMC,SAAS,GAAG,CAACD,aAAa,GAAGlF,OAAO,CAACqC,GAAG,CAACkC,iBAAiB,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGW,aAAa,CAACjE,GAAG;MACvG,IAAI,CAACzB,UAAU,CAAC8D,OAAO,IAAI,EAAE6B,SAAS,IAAI,IAAI,IAAIA,SAAS,CAAC7B,OAAO,CAAC,EAAE;QACpE;MACF;MACA,MAAM8B,iBAAiB,GAAG5F,UAAU,CAAC8D,OAAO,CAAC+B,qBAAqB,CAAC,CAAC;MACpE,MAAMC,gBAAgB,GAAGH,SAAS,CAAC7B,OAAO,CAAC+B,qBAAqB,CAAC,CAAC;MAClE,IAAIC,gBAAgB,CAACC,GAAG,GAAGH,iBAAiB,CAACG,GAAG,EAAE;QAChD/F,UAAU,CAAC8D,OAAO,CAACkC,SAAS,IAAIJ,iBAAiB,CAACG,GAAG,GAAGD,gBAAgB,CAACC,GAAG;MAC9E,CAAC,MAAM,IAAID,gBAAgB,CAACG,MAAM,GAAGL,iBAAiB,CAACK,MAAM,EAAE;QAC7DjG,UAAU,CAAC8D,OAAO,CAACkC,SAAS,IAAIF,gBAAgB,CAACG,MAAM,GAAGL,iBAAiB,CAACK,MAAM;MACpF;IACF;EACF,CAAC,EAAE,CAAClB,iBAAiB,EAAEvE,OAAO,CAAC,CAAC;EAChC,MAAM0F,iBAAiB,GAAG5H,KAAK,CAACoE,WAAW,CAACyD,WAAW,IAAI3F,OAAO,CAACqC,GAAG,CAACsD,WAAW,CAAC,EAAE,CAAC3F,OAAO,CAAC,CAAC;EAC/F,MAAM4F,qBAAqB,GAAG,SAAAA,CAAA,EAAwB;IAAA,IAAvBjB,aAAa,GAAAkB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAtF,SAAA,GAAAsF,SAAA,MAAG,CAAC,CAAC;IAC/C,OAAOhI,QAAQ,CAAC,CAAC,CAAC,EAAE8G,aAAa,EAAE;MACjCE,OAAO,EAAEH,uBAAuB,CAACC,aAAa,CAAC;MAC/C1D,GAAG,EAAEwD,iBAAiB;MACtBsB,IAAI,EAAE,UAAU;MAChB,eAAe,EAAEjG,IAAI;MACrB,eAAe,EAAER;IACnB,CAAC,CAAC;EACJ,CAAC;EACD,MAAM0G,cAAc,GAAG,SAAAA,CAAA,EAAwB;IAAA,IAAvBrB,aAAa,GAAAkB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAtF,SAAA,GAAAsF,SAAA,MAAG,CAAC,CAAC;IACxC,MAAMI,qBAAqB,GAAGtH,qBAAqB,CAAC2C,kBAAkB,EAAE8C,mBAAmB,CAAC;IAC5F,MAAM8B,aAAa,GAAGvH,qBAAqB,CAACsH,qBAAqB,EAAEL,qBAAqB,CAAC;IACzF,OAAOM,aAAa,CAACvB,aAAa,CAAC;EACrC,CAAC;EACD,MAAMwB,eAAe,GAAG,SAAAA,CAAA,EAAwB;IAAA,IAAvBxB,aAAa,GAAAkB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAtF,SAAA,GAAAsF,SAAA,MAAG,CAAC,CAAC;IACzC,OAAOhI,QAAQ,CAAC,CAAC,CAAC,EAAE8G,aAAa,EAAE;MACjCxD,EAAE,EAAE7B,SAAS;MACbyG,IAAI,EAAE,SAAS;MACf,sBAAsB,EAAErG,QAAQ,GAAG,MAAM,GAAGa,SAAS;MACrDU,GAAG,EAAEG,gBAAgB;MACrBgF,WAAW,EAAExH,cAAc,CAAC;IAC9B,CAAC,CAAC;EACJ,CAAC;;EAEDd,KAAK,CAACuI,aAAa,CAAC;IAClB7B,eAAe;IACfD,iBAAiB;IACjBzE;EACF,CAAC,CAAC;EACF,MAAMY,YAAY,GAAG5C,KAAK,CAAC0C,OAAO,CAAC,MAAM3C,QAAQ,CAAC,CAAC,CAAC,EAAEwG,gBAAgB,EAAE1D,6BAA6B,CAAC,EAAE,CAAC0D,gBAAgB,EAAE1D,6BAA6B,CAAC,CAAC;EAC1J,IAAI2F,WAAW;EACf,IAAIvH,KAAK,CAACW,QAAQ,EAAE;IAClB4G,WAAW,GAAG9B,eAAe;EAC/B,CAAC,MAAM;IACL8B,WAAW,GAAG9B,eAAe,CAACsB,MAAM,GAAG,CAAC,GAAGtB,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI;EACtE;EACA,OAAO;IACLhD,YAAY;IACZE,kBAAkB;IAClB1C,SAAS,EAAE4C,eAAe;IAC1BlB,YAAY;IACZrB,QAAQ;IACR8E,QAAQ;IACR6B,cAAc;IACdG,eAAe;IACfT,iBAAiB;IACjBlG,UAAU,EAAEiF,iBAAiB;IAC7B3E,IAAI;IACJE,OAAO,EAAE6B,YAAY;IACrB1B,KAAK,EAAEmG,WAAW;IAClB/B;EACF,CAAC;AACH;AACA,eAAezF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}