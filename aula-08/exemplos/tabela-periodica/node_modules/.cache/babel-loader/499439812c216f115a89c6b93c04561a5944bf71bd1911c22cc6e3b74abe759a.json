{"ast":null,"code":"export function getElementType(element) {\n  // Array com os números atômicos dos elementos de cada grupo\n  const metaisAlcalinos = [3, 11, 19, 37, 55, 87];\n  const metaisAlcalinoTerrosos = [4, 12, 20, 38, 56, 88];\n  const metaloides = [5, 14, 32, 33, 51, 52, 84];\n  const metaisDeTransicao = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 104, 105, 106, 107, 108, 109, 110, 111, 112];\n  const lantanideos = [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71];\n  const actinideos = [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112];\n  const naoMetais = [1, 6, 7, 8, 15, 16, 34];\n  const outrosMetais = [13, 31, 49, 50, 81, 82, 83, 113, 114, 115, 116];\n  const halogenios = [9, 17, 35, 53, 85, 117];\n  const gasesNobres = [2, 10, 18, 36, 54, 86, 118];\n\n  // Obtém o número atômico do elemento\n  const atomicNumber = element.atomicNumber;\n\n  // Verifica a qual grupo o número atômico pertence\n  if (metaisAlcalinos.includes(atomicNumber)) {\n    return 'metais-alcalinos';\n  } else if (metaisAlcalinoTerrosos.includes(atomicNumber)) {\n    return 'metais-alcalino-terrosos';\n  } else if (metaloides.includes(atomicNumber)) {\n    return 'metaloides';\n  } else if (metaisDeTransicao.includes(atomicNumber)) {\n    return 'metais-de-transicao';\n  } else if (lantanideos.includes(atomicNumber)) {\n    return 'lantanideos';\n  } else if (actinideos.includes(atomicNumber)) {\n    return 'actinideos';\n  } else if (naoMetais.includes(atomicNumber)) {\n    return 'nao-metais';\n  } else if (outrosMetais.includes(atomicNumber)) {\n    return 'outros-metais';\n  } else if (halogenios.includes(atomicNumber)) {\n    return 'halogenios';\n  } else if (gasesNobres.includes(atomicNumber)) {\n    return 'gases-nobres';\n  } else {\n    return ''; // Elemento não se encaixa em nenhuma categoria específica\n  }\n}\n\nexport function generateElectronDistribution(atomicNumber) {\n  let electronDistribution = [];\n  let electronsRemaining = atomicNumber;\n\n  // Distribuição em camadas\n  for (let shell = 1; electronsRemaining > 0; shell++) {\n    let maxElectronsInShell = 2 * Math.pow(shell, 2);\n    let electronsInShell = Math.min(electronsRemaining, maxElectronsInShell);\n    electronDistribution.push(`${shell}n${electronsInShell}`);\n    electronsRemaining -= electronsInShell;\n  }\n  return electronDistribution.join(' ');\n}\n\n// export function calculateLinusPaulingDiagram(atomicNumber) {\n//   const shells = [2]; // Primeira camada K (2 elétrons)\n//   let electrons = 2; // Número total de elétrons preenchidos\n\n//   // Loop para preencher as camadas subsequentes\n//   for (let n = 2; electrons < atomicNumber; n++) {\n//     const maxElectrons = 2 * n * n; // Número máximo de elétrons na camada n\n\n//     if (electrons + maxElectrons <= atomicNumber) {\n//       shells.push(maxElectrons); // Adiciona a camada completa\n//       electrons += maxElectrons; // Atualiza o número total de elétrons preenchidos\n//     } else {\n//       shells.push(atomicNumber - electrons); // Adiciona os elétrons restantes\n//       electrons = atomicNumber; // Atualiza o número total de elétrons preenchidos\n//     }\n//   }\n//   console.log(shells)\n//   return shells;\n// }\n\nexport function calculateLinusPaulingDiagram(atomicNumber) {\n  const shells = [0, 0, 0, 0];\n  let electrons = 0;\n\n  // Preencher os subníveis s, p, d e f com elétrons até atingir o número atômico\n  while (electrons < atomicNumber) {\n    if (electrons < 2) {\n      shells[0] += 1;\n      electrons += 1;\n    } else if (electrons < 10) {\n      shells[1] += 2;\n      electrons += 2;\n    } else if (electrons < 28) {\n      shells[2] += 6;\n      electrons += 6;\n    } else if (electrons < 60) {\n      shells[3] += 10;\n      electrons += 10;\n    }\n  }\n  return shells;\n}","map":{"version":3,"names":["getElementType","element","metaisAlcalinos","metaisAlcalinoTerrosos","metaloides","metaisDeTransicao","lantanideos","actinideos","naoMetais","outrosMetais","halogenios","gasesNobres","atomicNumber","includes","generateElectronDistribution","electronDistribution","electronsRemaining","shell","maxElectronsInShell","Math","pow","electronsInShell","min","push","join","calculateLinusPaulingDiagram","shells","electrons"],"sources":["/Users/cassioawt/git/GraPucrsOnline/DSF/aula-08/exemplos/tabela-periodica/src/util/elementosDefinitions.js"],"sourcesContent":["export function getElementType(element) {\n    // Array com os números atômicos dos elementos de cada grupo\n    const metaisAlcalinos = [3, 11, 19, 37, 55, 87];\n    const metaisAlcalinoTerrosos = [4, 12, 20, 38, 56, 88];\n    const metaloides = [5, 14, 32, 33, 51, 52, 84]\n    const metaisDeTransicao = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n      39, 40, 41, 42, 43, 44, 45, 46, 47, 48, \n      57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n      72, 73, 74, 75, 76, 77, 78, 79, 80, \n      89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n      104, 105, 106, 107, 108, 109, 110, 111, 112];\n    const lantanideos = [57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n      67, 68, 69, 70, 71];\n    const actinideos = [89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n      99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\n      109, 110, 111, 112];\n    const naoMetais = [1, 6, 7, 8, 15, 16, 34];\n    const outrosMetais = [13, 31, 49, 50, 81, 82, 83, 113, 114, 115, 116]\n    const halogenios = [9, 17, 35, 53, 85, 117];\n    const gasesNobres = [2, 10, 18, 36, 54, 86, 118];\n  \n    // Obtém o número atômico do elemento\n    const atomicNumber = element.atomicNumber;\n  \n    // Verifica a qual grupo o número atômico pertence\n    if (metaisAlcalinos.includes(atomicNumber)) {\n      return 'metais-alcalinos';\n    } else if (metaisAlcalinoTerrosos.includes(atomicNumber)) {\n      return 'metais-alcalino-terrosos';\n    } else if (metaloides.includes(atomicNumber)) {\n      return 'metaloides';\n    } else if (metaisDeTransicao.includes(atomicNumber)) {\n      return 'metais-de-transicao';\n    } else if (lantanideos.includes(atomicNumber)) {\n      return 'lantanideos';\n    } else if (actinideos.includes(atomicNumber)) {\n      return 'actinideos';\n    } else if (naoMetais.includes(atomicNumber)) {\n      return 'nao-metais';\n    } else if (outrosMetais.includes(atomicNumber)) {\n      return 'outros-metais';\n    } else if (halogenios.includes(atomicNumber)) {\n      return 'halogenios';\n    } else if (gasesNobres.includes(atomicNumber)) {\n      return 'gases-nobres';\n    } else {\n      return ''; // Elemento não se encaixa em nenhuma categoria específica\n    }\n  }\n  \n  export  function generateElectronDistribution(atomicNumber) {\n    let electronDistribution = [];\n    let electronsRemaining = atomicNumber;\n  \n    // Distribuição em camadas\n    for (let shell = 1; electronsRemaining > 0; shell++) {\n      let maxElectronsInShell = 2 * Math.pow(shell, 2);\n      let electronsInShell = Math.min(electronsRemaining, maxElectronsInShell);\n  \n      electronDistribution.push(`${shell}n${electronsInShell}`);\n  \n      electronsRemaining -= electronsInShell;\n    }\n  \n    return electronDistribution.join(' ');\n  }\n\n  // export function calculateLinusPaulingDiagram(atomicNumber) {\n  //   const shells = [2]; // Primeira camada K (2 elétrons)\n  //   let electrons = 2; // Número total de elétrons preenchidos\n  \n  //   // Loop para preencher as camadas subsequentes\n  //   for (let n = 2; electrons < atomicNumber; n++) {\n  //     const maxElectrons = 2 * n * n; // Número máximo de elétrons na camada n\n  \n  //     if (electrons + maxElectrons <= atomicNumber) {\n  //       shells.push(maxElectrons); // Adiciona a camada completa\n  //       electrons += maxElectrons; // Atualiza o número total de elétrons preenchidos\n  //     } else {\n  //       shells.push(atomicNumber - electrons); // Adiciona os elétrons restantes\n  //       electrons = atomicNumber; // Atualiza o número total de elétrons preenchidos\n  //     }\n  //   }\n  //   console.log(shells)\n  //   return shells;\n  // }\n\n  export function calculateLinusPaulingDiagram(atomicNumber) {\n    const shells = [0, 0, 0, 0];\n    let electrons = 0;\n  \n    // Preencher os subníveis s, p, d e f com elétrons até atingir o número atômico\n    while (electrons < atomicNumber) {\n      if (electrons < 2) {\n        shells[0] += 1;\n        electrons += 1;\n      } else if (electrons < 10) {\n        shells[1] += 2;\n        electrons += 2;\n      } else if (electrons < 28) {\n        shells[2] += 6;\n        electrons += 6;\n      } else if (electrons < 60) {\n        shells[3] += 10;\n        electrons += 10;\n      }\n    }\n  \n    return shells;\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}